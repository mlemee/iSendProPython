# coding: utf-8

"""
    API iSendPro

    [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: support@isendpro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class REPERTOIREmodifrequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keyid': 'str',
        'repertoire_edit': 'str',
        'repertoire_id': 'str',
        'num': 'list[str]',
        'champ1': 'list[str]',
        'champ2': 'list[str]',
        'champ3': 'list[str]',
        'champ4': 'list[str]',
        'champ5': 'list[str]',
        'champ6': 'list[str]',
        'champ7': 'list[str]',
        'champ8': 'list[str]',
        'champ9': 'list[str]',
        'champ10': 'list[str]',
        'champ11': 'list[str]',
        'champ12': 'list[str]',
        'champ13': 'list[str]',
        'champ14': 'list[str]',
        'champ15': 'list[str]',
        'champ16': 'list[str]',
        'champ17': 'list[str]',
        'champ18': 'list[str]',
        'champ19': 'list[str]',
        'champ20': 'list[str]',
        'champ21': 'list[str]',
        'champ22': 'list[str]',
        'champ23': 'list[str]',
        'champ24': 'list[str]',
        'champ25': 'list[str]',
        'champ26': 'list[str]',
        'champ27': 'list[str]'
    }

    attribute_map = {
        'keyid': 'keyid',
        'repertoire_edit': 'repertoireEdit',
        'repertoire_id': 'repertoireId',
        'num': 'num',
        'champ1': 'champ1',
        'champ2': 'champ2',
        'champ3': 'champ3',
        'champ4': 'champ4',
        'champ5': 'champ5',
        'champ6': 'champ6',
        'champ7': 'champ7',
        'champ8': 'champ8',
        'champ9': 'champ9',
        'champ10': 'champ10',
        'champ11': 'champ11',
        'champ12': 'champ12',
        'champ13': 'champ13',
        'champ14': 'champ14',
        'champ15': 'champ15',
        'champ16': 'champ16',
        'champ17': 'champ17',
        'champ18': 'champ18',
        'champ19': 'champ19',
        'champ20': 'champ20',
        'champ21': 'champ21',
        'champ22': 'champ22',
        'champ23': 'champ23',
        'champ24': 'champ24',
        'champ25': 'champ25',
        'champ26': 'champ26',
        'champ27': 'champ27'
    }

    def __init__(self, keyid='', repertoire_edit='add', repertoire_id='0', num=None, champ1=None, champ2=None, champ3=None, champ4=None, champ5=None, champ6=None, champ7=None, champ8=None, champ9=None, champ10=None, champ11=None, champ12=None, champ13=None, champ14=None, champ15=None, champ16=None, champ17=None, champ18=None, champ19=None, champ20=None, champ21=None, champ22=None, champ23=None, champ24=None, champ25=None, champ26=None, champ27=None):  # noqa: E501
        """REPERTOIREmodifrequest - a model defined in Swagger"""  # noqa: E501

        self._keyid = None
        self._repertoire_edit = None
        self._repertoire_id = None
        self._num = None
        self._champ1 = None
        self._champ2 = None
        self._champ3 = None
        self._champ4 = None
        self._champ5 = None
        self._champ6 = None
        self._champ7 = None
        self._champ8 = None
        self._champ9 = None
        self._champ10 = None
        self._champ11 = None
        self._champ12 = None
        self._champ13 = None
        self._champ14 = None
        self._champ15 = None
        self._champ16 = None
        self._champ17 = None
        self._champ18 = None
        self._champ19 = None
        self._champ20 = None
        self._champ21 = None
        self._champ22 = None
        self._champ23 = None
        self._champ24 = None
        self._champ25 = None
        self._champ26 = None
        self._champ27 = None
        self.discriminator = None

        self.keyid = keyid
        self.repertoire_edit = repertoire_edit
        self.repertoire_id = repertoire_id
        if num is not None:
            self.num = num
        if champ1 is not None:
            self.champ1 = champ1
        if champ2 is not None:
            self.champ2 = champ2
        if champ3 is not None:
            self.champ3 = champ3
        if champ4 is not None:
            self.champ4 = champ4
        if champ5 is not None:
            self.champ5 = champ5
        if champ6 is not None:
            self.champ6 = champ6
        if champ7 is not None:
            self.champ7 = champ7
        if champ8 is not None:
            self.champ8 = champ8
        if champ9 is not None:
            self.champ9 = champ9
        if champ10 is not None:
            self.champ10 = champ10
        if champ11 is not None:
            self.champ11 = champ11
        if champ12 is not None:
            self.champ12 = champ12
        if champ13 is not None:
            self.champ13 = champ13
        if champ14 is not None:
            self.champ14 = champ14
        if champ15 is not None:
            self.champ15 = champ15
        if champ16 is not None:
            self.champ16 = champ16
        if champ17 is not None:
            self.champ17 = champ17
        if champ18 is not None:
            self.champ18 = champ18
        if champ19 is not None:
            self.champ19 = champ19
        if champ20 is not None:
            self.champ20 = champ20
        if champ21 is not None:
            self.champ21 = champ21
        if champ22 is not None:
            self.champ22 = champ22
        if champ23 is not None:
            self.champ23 = champ23
        if champ24 is not None:
            self.champ24 = champ24
        if champ25 is not None:
            self.champ25 = champ25
        if champ26 is not None:
            self.champ26 = champ26
        if champ27 is not None:
            self.champ27 = champ27

    @property
    def keyid(self):
        """Gets the keyid of this REPERTOIREmodifrequest.  # noqa: E501

        Clé API  # noqa: E501

        :return: The keyid of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """Sets the keyid of this REPERTOIREmodifrequest.

        Clé API  # noqa: E501

        :param keyid: The keyid of this REPERTOIREmodifrequest.  # noqa: E501
        :type: str
        """
        if keyid is None:
            raise ValueError("Invalid value for `keyid`, must not be `None`")  # noqa: E501

        self._keyid = keyid

    @property
    def repertoire_edit(self):
        """Gets the repertoire_edit of this REPERTOIREmodifrequest.  # noqa: E501

        action à réaliser, \"add\" pour l'ajout de numéros, \"del\" pour la suppression de numéros  # noqa: E501

        :return: The repertoire_edit of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: str
        """
        return self._repertoire_edit

    @repertoire_edit.setter
    def repertoire_edit(self, repertoire_edit):
        """Sets the repertoire_edit of this REPERTOIREmodifrequest.

        action à réaliser, \"add\" pour l'ajout de numéros, \"del\" pour la suppression de numéros  # noqa: E501

        :param repertoire_edit: The repertoire_edit of this REPERTOIREmodifrequest.  # noqa: E501
        :type: str
        """
        if repertoire_edit is None:
            raise ValueError("Invalid value for `repertoire_edit`, must not be `None`")  # noqa: E501
        allowed_values = ["add", "del"]  # noqa: E501
        if repertoire_edit not in allowed_values:
            raise ValueError(
                "Invalid value for `repertoire_edit` ({0}), must be one of {1}"  # noqa: E501
                .format(repertoire_edit, allowed_values)
            )

        self._repertoire_edit = repertoire_edit

    @property
    def repertoire_id(self):
        """Gets the repertoire_id of this REPERTOIREmodifrequest.  # noqa: E501

        repertoireId du répertoire cible  # noqa: E501

        :return: The repertoire_id of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: str
        """
        return self._repertoire_id

    @repertoire_id.setter
    def repertoire_id(self, repertoire_id):
        """Sets the repertoire_id of this REPERTOIREmodifrequest.

        repertoireId du répertoire cible  # noqa: E501

        :param repertoire_id: The repertoire_id of this REPERTOIREmodifrequest.  # noqa: E501
        :type: str
        """
        if repertoire_id is None:
            raise ValueError("Invalid value for `repertoire_id`, must not be `None`")  # noqa: E501

        self._repertoire_id = repertoire_id

    @property
    def num(self):
        """Gets the num of this REPERTOIREmodifrequest.  # noqa: E501

        liste des numéros des téléphone à ajouter ou supprimer  # noqa: E501

        :return: The num of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this REPERTOIREmodifrequest.

        liste des numéros des téléphone à ajouter ou supprimer  # noqa: E501

        :param num: The num of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._num = num

    @property
    def champ1(self):
        """Gets the champ1 of this REPERTOIREmodifrequest.  # noqa: E501

        Noms des contact  # noqa: E501

        :return: The champ1 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ1

    @champ1.setter
    def champ1(self, champ1):
        """Sets the champ1 of this REPERTOIREmodifrequest.

        Noms des contact  # noqa: E501

        :param champ1: The champ1 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ1 = champ1

    @property
    def champ2(self):
        """Gets the champ2 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs A des contacts  # noqa: E501

        :return: The champ2 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ2

    @champ2.setter
    def champ2(self, champ2):
        """Sets the champ2 of this REPERTOIREmodifrequest.

        Champs A des contacts  # noqa: E501

        :param champ2: The champ2 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ2 = champ2

    @property
    def champ3(self):
        """Gets the champ3 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs B des contacts  # noqa: E501

        :return: The champ3 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ3

    @champ3.setter
    def champ3(self, champ3):
        """Sets the champ3 of this REPERTOIREmodifrequest.

        Champs B des contacts  # noqa: E501

        :param champ3: The champ3 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ3 = champ3

    @property
    def champ4(self):
        """Gets the champ4 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs C des contacts  # noqa: E501

        :return: The champ4 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ4

    @champ4.setter
    def champ4(self, champ4):
        """Sets the champ4 of this REPERTOIREmodifrequest.

        Champs C des contacts  # noqa: E501

        :param champ4: The champ4 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ4 = champ4

    @property
    def champ5(self):
        """Gets the champ5 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs D des contacts  # noqa: E501

        :return: The champ5 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ5

    @champ5.setter
    def champ5(self, champ5):
        """Sets the champ5 of this REPERTOIREmodifrequest.

        Champs D des contacts  # noqa: E501

        :param champ5: The champ5 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ5 = champ5

    @property
    def champ6(self):
        """Gets the champ6 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs E des contacts  # noqa: E501

        :return: The champ6 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ6

    @champ6.setter
    def champ6(self, champ6):
        """Sets the champ6 of this REPERTOIREmodifrequest.

        Champs E des contacts  # noqa: E501

        :param champ6: The champ6 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ6 = champ6

    @property
    def champ7(self):
        """Gets the champ7 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs F des contacts  # noqa: E501

        :return: The champ7 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ7

    @champ7.setter
    def champ7(self, champ7):
        """Sets the champ7 of this REPERTOIREmodifrequest.

        Champs F des contacts  # noqa: E501

        :param champ7: The champ7 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ7 = champ7

    @property
    def champ8(self):
        """Gets the champ8 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs G des contacts  # noqa: E501

        :return: The champ8 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ8

    @champ8.setter
    def champ8(self, champ8):
        """Sets the champ8 of this REPERTOIREmodifrequest.

        Champs G des contacts  # noqa: E501

        :param champ8: The champ8 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ8 = champ8

    @property
    def champ9(self):
        """Gets the champ9 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs H des contacts  # noqa: E501

        :return: The champ9 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ9

    @champ9.setter
    def champ9(self, champ9):
        """Sets the champ9 of this REPERTOIREmodifrequest.

        Champs H des contacts  # noqa: E501

        :param champ9: The champ9 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ9 = champ9

    @property
    def champ10(self):
        """Gets the champ10 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs I des contacts  # noqa: E501

        :return: The champ10 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ10

    @champ10.setter
    def champ10(self, champ10):
        """Sets the champ10 of this REPERTOIREmodifrequest.

        Champs I des contacts  # noqa: E501

        :param champ10: The champ10 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ10 = champ10

    @property
    def champ11(self):
        """Gets the champ11 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs J des contacts  # noqa: E501

        :return: The champ11 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ11

    @champ11.setter
    def champ11(self, champ11):
        """Sets the champ11 of this REPERTOIREmodifrequest.

        Champs J des contacts  # noqa: E501

        :param champ11: The champ11 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ11 = champ11

    @property
    def champ12(self):
        """Gets the champ12 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs K des contacts  # noqa: E501

        :return: The champ12 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ12

    @champ12.setter
    def champ12(self, champ12):
        """Sets the champ12 of this REPERTOIREmodifrequest.

        Champs K des contacts  # noqa: E501

        :param champ12: The champ12 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ12 = champ12

    @property
    def champ13(self):
        """Gets the champ13 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs L des contacts  # noqa: E501

        :return: The champ13 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ13

    @champ13.setter
    def champ13(self, champ13):
        """Sets the champ13 of this REPERTOIREmodifrequest.

        Champs L des contacts  # noqa: E501

        :param champ13: The champ13 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ13 = champ13

    @property
    def champ14(self):
        """Gets the champ14 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs M des contacts  # noqa: E501

        :return: The champ14 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ14

    @champ14.setter
    def champ14(self, champ14):
        """Sets the champ14 of this REPERTOIREmodifrequest.

        Champs M des contacts  # noqa: E501

        :param champ14: The champ14 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ14 = champ14

    @property
    def champ15(self):
        """Gets the champ15 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs N des contacts  # noqa: E501

        :return: The champ15 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ15

    @champ15.setter
    def champ15(self, champ15):
        """Sets the champ15 of this REPERTOIREmodifrequest.

        Champs N des contacts  # noqa: E501

        :param champ15: The champ15 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ15 = champ15

    @property
    def champ16(self):
        """Gets the champ16 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs O des contacts  # noqa: E501

        :return: The champ16 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ16

    @champ16.setter
    def champ16(self, champ16):
        """Sets the champ16 of this REPERTOIREmodifrequest.

        Champs O des contacts  # noqa: E501

        :param champ16: The champ16 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ16 = champ16

    @property
    def champ17(self):
        """Gets the champ17 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs P des contacts  # noqa: E501

        :return: The champ17 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ17

    @champ17.setter
    def champ17(self, champ17):
        """Sets the champ17 of this REPERTOIREmodifrequest.

        Champs P des contacts  # noqa: E501

        :param champ17: The champ17 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ17 = champ17

    @property
    def champ18(self):
        """Gets the champ18 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs Q des contacts  # noqa: E501

        :return: The champ18 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ18

    @champ18.setter
    def champ18(self, champ18):
        """Sets the champ18 of this REPERTOIREmodifrequest.

        Champs Q des contacts  # noqa: E501

        :param champ18: The champ18 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ18 = champ18

    @property
    def champ19(self):
        """Gets the champ19 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs R des contacts  # noqa: E501

        :return: The champ19 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ19

    @champ19.setter
    def champ19(self, champ19):
        """Sets the champ19 of this REPERTOIREmodifrequest.

        Champs R des contacts  # noqa: E501

        :param champ19: The champ19 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ19 = champ19

    @property
    def champ20(self):
        """Gets the champ20 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs S des contacts  # noqa: E501

        :return: The champ20 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ20

    @champ20.setter
    def champ20(self, champ20):
        """Sets the champ20 of this REPERTOIREmodifrequest.

        Champs S des contacts  # noqa: E501

        :param champ20: The champ20 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ20 = champ20

    @property
    def champ21(self):
        """Gets the champ21 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs T des contacts  # noqa: E501

        :return: The champ21 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ21

    @champ21.setter
    def champ21(self, champ21):
        """Sets the champ21 of this REPERTOIREmodifrequest.

        Champs T des contacts  # noqa: E501

        :param champ21: The champ21 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ21 = champ21

    @property
    def champ22(self):
        """Gets the champ22 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs U des contacts  # noqa: E501

        :return: The champ22 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ22

    @champ22.setter
    def champ22(self, champ22):
        """Sets the champ22 of this REPERTOIREmodifrequest.

        Champs U des contacts  # noqa: E501

        :param champ22: The champ22 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ22 = champ22

    @property
    def champ23(self):
        """Gets the champ23 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs V des contacts  # noqa: E501

        :return: The champ23 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ23

    @champ23.setter
    def champ23(self, champ23):
        """Sets the champ23 of this REPERTOIREmodifrequest.

        Champs V des contacts  # noqa: E501

        :param champ23: The champ23 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ23 = champ23

    @property
    def champ24(self):
        """Gets the champ24 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs W des contacts  # noqa: E501

        :return: The champ24 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ24

    @champ24.setter
    def champ24(self, champ24):
        """Sets the champ24 of this REPERTOIREmodifrequest.

        Champs W des contacts  # noqa: E501

        :param champ24: The champ24 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ24 = champ24

    @property
    def champ25(self):
        """Gets the champ25 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs X des contacts  # noqa: E501

        :return: The champ25 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ25

    @champ25.setter
    def champ25(self, champ25):
        """Sets the champ25 of this REPERTOIREmodifrequest.

        Champs X des contacts  # noqa: E501

        :param champ25: The champ25 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ25 = champ25

    @property
    def champ26(self):
        """Gets the champ26 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs Y des contacts  # noqa: E501

        :return: The champ26 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ26

    @champ26.setter
    def champ26(self, champ26):
        """Sets the champ26 of this REPERTOIREmodifrequest.

        Champs Y des contacts  # noqa: E501

        :param champ26: The champ26 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ26 = champ26

    @property
    def champ27(self):
        """Gets the champ27 of this REPERTOIREmodifrequest.  # noqa: E501

        Champs Z des contacts  # noqa: E501

        :return: The champ27 of this REPERTOIREmodifrequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._champ27

    @champ27.setter
    def champ27(self, champ27):
        """Sets the champ27 of this REPERTOIREmodifrequest.

        Champs Z des contacts  # noqa: E501

        :param champ27: The champ27 of this REPERTOIREmodifrequest.  # noqa: E501
        :type: list[str]
        """

        self._champ27 = champ27

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, REPERTOIREmodifrequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
